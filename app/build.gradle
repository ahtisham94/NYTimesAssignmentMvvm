plugins {
    id 'com.android.application'
    id 'kotlin-android-extensions'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'jacoco'

}

def secureProps = new Properties()


if (file("../secure.properties").exists()) {
    file("../secure.properties")?.withInputStream { secureProps.load(it) }
}
jacoco {
    toolVersion = "0.8.7"
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled  true
        html.enabled  true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}


android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.assignment"
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue "string", "base_url", (secureProps.getProperty("BASE_URL") ?: "")
        resValue "string", "api_key", (secureProps.getProperty("API_KEY") ?: "")
    }

    signingConfigs {
        release {
            keyAlias 'Assignment'
            keyPassword 'Assignment'
            storeFile file('../Assignment.jks')
            storePassword 'Assignment'
        }
        debug {
            keyAlias 'Assignment'
            keyPassword 'Assignment'
            storeFile file('../Assignment.jks')
            storePassword 'Assignment'

        }
    }


    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                renameAPK(variant, defaultConfig, 'R')
            }

        }
        debug {
            testCoverageEnabled true
        }

    }

    viewBinding {
        android.buildFeatures.viewBinding = true
    }
    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def renameAPK(variant, defaultConfig, buildType) {
    variant.outputs.each { output ->
        def formattedDate = new Date().format('dd-MM-yyyy_HH_mm')
        def fileName = "Assignment" + "_V" + defaultConfig.versionCode + "_" + formattedDate + "_" + buildType + ".apk"
        output.outputFileName = new File(fileName)
    }
}

dependencies {


    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.0"
    implementation "androidx.appcompat:appcompat:1.4.2"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    // material Design
    implementation "com.google.android.material:material:1.6.1"
    implementation "androidx.recyclerview:recyclerview:1.3.0-alpha02"

    //Room Database for data persistence
    implementation "androidx.room:room-runtime:2.4.2"
    implementation "androidx.room:room-ktx:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"

    //Android Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.2"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.2"

    //ssp and sdp for different screen UI resolution
    implementation "com.intuit.ssp:ssp-android:1.0.6"
    implementation "com.intuit.sdp:sdp-android:1.0.6"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.7.0"
    implementation "com.squareup.retrofit2:converter-gson:2.7.0"


    // Logging Interceptors for request Logging
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"

    // Glide for Image Loading
    implementation "com.github.bumptech.glide:glide:4.11.0"

    // Gson for Data Serialization
    implementation "com.google.code.gson:gson:2.8.9"

    // Livedata for lifecycle aware
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"

    // Dagger Hilt for Dependency Injection
    implementation "com.google.dagger:hilt-android:2.38.1"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "com.google.dagger:hilt-compiler:2.38.1"
    kapt "androidx.hilt:hilt-compiler:1.0.0-beta01"

    // Lottie for loading dialog animation
    implementation "com.airbnb.android:lottie:3.4.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"

    //  coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1'



    testImplementation "junit:junit:4.13.2"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0' //
    testImplementation "androidx.test:core:1.4.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.navigation:navigation-testing:2.5.1"
    androidTestImplementation "io.mockk:mockk-android:1.11.0"
    testImplementation "io.mockk:mockk:1.11.0"
    androidTestImplementation "androidx.test:core:1.4.0"
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'

    // for fragment testing
    debugImplementation('androidx.fragment:fragment-testing:1.1.0') {
        // exclude androidx.test:core while fragment_testing depends on 1.1.0
        exclude group: 'androidx.test', module: 'core'
    }


}
kapt {
    correctErrorTypes = true
}
configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}